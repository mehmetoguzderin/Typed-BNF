   
                                       
                                                  
                        
                                      

               
                         
                                                  

                              
                                                                      
         
                               
       
                     

                  
                
             
  

list{e} : e -> list_0                    
        | list{e} e -> list_1                                        

seplist{sep, e} : e -> seplist_0                            
                | seplist{sep, e} sep e -> seplist_1                                                           
                
nullable{seq} : -> nullable_0                          
              | seq -> nullable_1                                 

surround{b, e, content} : b nullable{content} e -> surround_0                                                      

start : list{toplevel} -> start_0                             

typevar : "'" CNAME -> typevar_0                                           

manyvars : nullable{seplist{",", typevar}} -> manyvars_0                                                        
    

  
                 
                             
                       
                                 

               
              
                                 
  
decl : "val" CNAME ":" type -> decl_0                                                       
     | "typealias" DOTTED_NAME "=" DOTTED_NAME -> decl_1                                                                                      
     | "shape" DOTTED_NAME "[" manyvars "]" "{" manyfieldecls "}" -> decl_2                                           
     | "shape" DOTTED_NAME "{" manyfieldecls "}" -> decl_3                                             


fieldecl : CNAME ":" type -> fieldecl_0                                                      
manyfieldecls: list{fieldecl} -> manyfieldecls_0                                           


manytypes : surround{"(", ")", seplist{",", type}} -> manytypes_0                                                                
manytypeargs : surround{"[", "]", seplist{",", type}} -> manytypeargs_0                                                                   
vars : list{typevar} -> vars_0                                  

  
                       
                      
                      
                        
  

type : manytypes "->" type -> type_0                                                       
     | "(" nullable{seplist{",", type}} ")" -> type_1                                                                
     | type manytypeargs -> type_2                                                     
     | "forall" vars "." type -> type_3                                                         
     | typevar -> type_4                                
     | DOTTED_NAME -> type_5                                                

id : CNAME -> id_0                      
nonterm : "<" CNAME ">" -> nonterm_0                                   
toplevel: id ":" cases -> toplevel_0                                                                
        | "%import" ESCAPED_STRING -> toplevel_1                                                              
        | "%ignore" seplist{",", nonterm} -> toplevel_2                                                               
        | decl -> toplevel_3                                          
        | lexerdef -> toplevel_4                                         
        | id "[" seplist{",", id} "]" ":" cases -> toplevel_5                                                                              

cases : seplist{"|", case} -> cases_0                                         
atoms : nullable{list{atom}} -> atoms_0                                          
case : atoms "{" block "}" -> case_0                                                 

atom : "<" CNAME ">" -> atom_0                                                            
     | ESCAPED_STRING -> atom_1                                                             
     | CNAME -> atom_2                                                   
     | CNAME "[" seplist{",", atom} "]" -> atom_3                                                                        


binder: id "=" exp -> binder_0                                                        
binders: seplist{"and", binder} -> binders_0                                             

exp : 
    | "let" binders "in" exp -> exp_0                                                                             
    | "let" "rec" binders "in" exp -> exp_1                                                                            
    | "fn" args "->" exp -> exp_2                                                                      
    | call -> exp_3                                         

block : blockseq -> block_0                                                                                    
blockseq : blockseq ";" exp -> blockseq_0                                              
         | exp -> blockseq_1                                    

call : call "(" seplist{",", exp} ")" -> call_0                                                                                
     | call "(" ")" -> call_1                                                       
     | atomexp -> call_2                     

                                                                                    
                     

atomexp : INT -> atomexp_0                                                          
        | FLOAT -> atomexp_1                                                                
        | ESCAPED_STRING -> atomexp_2                                                                             
        | "$" INT -> atomexp_3                                                              
        | "(" ")" -> atomexp_4                                                          
        | "(" seplist{",", exp} ")" -> atomexp_5                                                                            
        | CNAME -> atomexp_6                                                                
        | atomexp "." CNAME -> atomexp_7                                                                          

args : "(" nullable{seplist{",", id}} ")" -> args_0                                                


  
                     
             

                   
               
                        
  
lexer :  seplist{"|", lexer_and} -> lexer_0                                           

lexer_and : list{lexer_atomexpr} -> lexer_and_0                                            

lexer_atomexpr :lexer_atomexpr "+" -> lexer_atomexpr_0                                                             
      |  lexer_atomexpr "*" -> lexer_atomexpr_1                                                        
      |  lexer_atomexpr "?" -> lexer_atomexpr_2                                                            
      |  lexer_atom -> lexer_atomexpr_3                          

lexer_atom :  ESCAPED_STRING -> lexer_atom_0                                                                               
      | "!" lexer_atom -> lexer_atom_1                                        
      |  "(" lexer ")" -> lexer_atom_2                                          
      |  "\\d" -> lexer_atom_3                                         
      |  "[" UNICODE (".." | "-") UNICODE "]" -> lexer_atom_4                                                                                                
      |  "[" /./ (".."|"-") /[^]]/ "]" -> lexer_atom_5                                                                                                 
      | ("_" | ".") -> lexer_atom_6                                       
      | CNAME -> lexer_atom_7                                         

      

lexerdef : "<" CNAME ">" ":" lexer -> lexerdef_0                                                         

UCODE : DIGIT | /[a-fA-F]/
UNICODE : "\\" "u" UCODE UCODE UCODE UCODE

DOTTED_NAME : CNAME ("." CNAME)*

%import common.ESCAPED_STRING
%import common.CNAME
%import common.FLOAT
%import common.INT
%import common.WS
%import common.DIGIT
%import common.LETTER
%import common.C_COMMENT
%import common.CPP_COMMENT
%ignore WS
%ignore C_COMMENT
%ignore CPP_COMMENT
