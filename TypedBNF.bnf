<list(toplevel)> ::= <toplevel>
                 |   <list(toplevel)> <toplevel>
<start> ::= <list(toplevel)>
<identstr> ::= CNAMEPLUS
<typ> ::= <arrow_typ>
<slist(",",param_type)> ::= <param_type>
                        |   <slist(",",param_type)> ',' <param_type>
<empty(slist(",",param_type))> ::= 
                               |   <slist(",",param_type)>
<eslist(",",param_type)> ::= <empty(slist(",",param_type))>
<arrow_typ> ::= <typ2> '->' <arrow_typ>
            |   '(' <eslist(",",param_type)> ')' '->' <arrow_typ>
            |   <type_product>
<slist(",",typ)> ::= <typ>
                 |   <slist(",",typ)> ',' <typ>
<typ2> ::= CNAMEPLUS
       |   <tvar>
       |   <typ2> '<' <slist(",",typ)> '>'
<type_product> ::= <type_product> '*' <typ2>
               |   <typ2>
<top_typ> ::= '<' <slist(",",tvar_str)> '>' <typ>
          |   <typ>
<tvar> ::= '\'' CNAMEPLUS
<tvar_str> ::= '\'' CNAMEPLUS
<param_type> ::= CNAMEPLUS ':' <typ>
             |   <typ>
<slist(",",tvar_str)> ::= <tvar_str>
                      |   <slist(",",tvar_str)> ',' <tvar_str>
<type_params> ::= '<' <slist(",",tvar_str)> '>'
              |   
<field_ann> ::= CNAMEPLUS ':' <typ>
<slist(",",field_ann)> ::= <field_ann>
                       |   <slist(",",field_ann)> ',' <field_ann>
<empty(slist(",",field_ann))> ::= 
                              |   <slist(",",field_ann)>
<eslist(",",field_ann)> ::= <empty(slist(",",field_ann))>
<field_anns> ::= '(' <eslist(",",field_ann)> ')'
             |   
<decl> ::= 'extern' 'var' <identstr> ':' <top_typ>
       |   'case' <identstr> ':' <typ>
       |   'extern' 'type' <identstr> <type_params> <field_anns>
       |   'type' <identstr> <type_params> <field_anns>
<toplevel> ::= <def>
           |   <decl>
           |   <lexerdef>
           |   'ignore' <slist(",",identstr)>
<slist(",",identstr)> ::= <identstr>
                      |   <slist(",",identstr)> ',' <identstr>
<def> ::= CNAMEPLUS '(' <slist(",",identstr)> ')' <productions>
      |   CNAMEPLUS <productions>
<productions> ::= ':' <production>
              |   <productions> '|' <production>
<list(psym)> ::= <psym>
             |   <list(psym)> <psym>
<empty(list(psym))> ::= 
                    |   <list(psym)>
<elist(psym)> ::= <empty(list(psym))>
<production> ::= <elist(psym)> '{' <expr> '}'
<slist(",",psym)> ::= <psym>
                  |   <slist(",",psym)> ',' <psym>
<psym> ::= '<' <identstr> '>'
       |   ESCAPED_STRING
       |   <identstr>
       |   CNAMEPLUS '(' <slist(",",psym)> ')'
<ann> ::= <identstr> ':' <typ>
<slist(",",ann)> ::= <ann>
                 |   <slist(",",ann)> ',' <ann>
<empty(slist(",",ann))> ::= 
                        |   <slist(",",ann)>
<eslist(",",ann)> ::= <empty(slist(",",ann))>
<func_parameters> ::= '(' <eslist(",",ann)> ')'
<expr> ::= 'let' <identstr> '=' <expr> 'in' <expr>
       |   'fun' <func_parameters> '->' <expr>
       |   <call>
       |   <call> ';' <expr>
<call> ::= <call> '(' <eslist(",",expr)> ')'
       |   <atomexp>
<empty(slist(",",expr))> ::= 
                         |   <slist(",",expr)>
<eslist(",",expr)> ::= <empty(slist(",",expr))>
<slist(",",expr)> ::= <expr>
                  |   <slist(",",expr)> ',' <expr>
<atomexp> ::= INT
          |   FLOAT
          |   ESCAPED_STRING
          |   '$' INT
          |   '[' <eslist(",",expr)> ']'
          |   '(' ')'
          |   '(' <slist(",",expr)> ')'
          |   CNAMEPLUS
          |   <atomexp> '.' CNAMEPLUS
          |   'true'
          |   'false'
<slist("|",lexer_and)> ::= <lexer_and>
                       |   <slist("|",lexer_and)> '|' <lexer_and>
<lexer> ::= <slist("|",lexer_and)>
<list(lexer_atomexpr)> ::= <lexer_atomexpr>
                       |   <list(lexer_atomexpr)> <lexer_atomexpr>
<lexer_and> ::= <list(lexer_atomexpr)>
<lexer_atomexpr> ::= <lexer_atomexpr> '+'
                 |   <lexer_atomexpr> '*'
                 |   <lexer_atomexpr> '?'
                 |   <lexer_atom>
<lexer_atom> ::= ESCAPED_STRING
             |   '!' <lexer_atom>
             |   '(' <lexer> ')'
             |   '\\d'
             |   RANGE
             |   UNICODE_RANGE
             |   '_'
             |   '.'
             |   CNAMEPLUS
<lexerdef> ::= CNAMEPLUS '=' <lexer> ';'
fragment UCODE : (DIGIT | [\u0061-\u0066] | [\u0041-\u0046]) ;
fragment UNICODE : '\\' 'u' UCODE UCODE UCODE UCODE ;
UNICODE_RANGE : '[' UNICODE '-' UNICODE ']' ;
RANGE : '[' . '-' . ']' ;
fragment LCASE_LETTER : [\u0061-\u007A] ;
fragment UCASE_LETTER : [\u0041-\u005A] ;
fragment LETTER : (UCASE_LETTER | LCASE_LETTER) ;
fragment WORD : LETTER+ ;
CNAMEPLUS : ('_' | LETTER) ('_' | '-' | LETTER | DIGIT)* ;
INT : DIGIT+ ;
fragment DIGIT : [\u0030-\u0039] ;
WS : (' ' | '\t' | '\r' | '\n') -> channel(HIDDEN);
FLOAT : INT ('.' INT)? (('E' | 'e') INT)? ;
fragment ESC : ('a' | 'b' | 't' | 'n' | 'r' | '\\' | '"') ;
ESCAPED_STRING : '"' (('\\' ESC) | ~('"' | '\\'))* '"' ;
CPP_COMMENT : '/*' .*? '*/' -> channel(HIDDEN);
C_COMMENT : '//' ~'\n'* -> channel(HIDDEN);
