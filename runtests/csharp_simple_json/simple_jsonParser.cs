//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\runtests\csharp_simple_json\simple_json.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace simple_json {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class simple_jsonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, INT=8, FLOAT=9, 
		STR=10, SPACE=11;
	public const int
		RULE_start = 0, RULE_start__y_ = 1, RULE_jsonpair = 2, RULE_seplist_o__i__s__i__s_json_p_ = 3, 
		RULE_seplist_o__i__s__i__s_jsonpair_p_ = 4, RULE_json = 5;
	public static readonly string[] ruleNames = {
		"start", "start__y_", "jsonpair", "seplist_o__i__s__i__s_json_p_", "seplist_o__i__s__i__s_jsonpair_p_", 
		"json"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "','", "'null'", "'['", "']'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "INT", "FLOAT", "STR", 
		"SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "simple_json.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static simple_jsonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public simple_jsonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public simple_jsonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public JsonValue result;
		public Start__y_Context v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(simple_jsonParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Start__y_Context start__y_() {
			return GetRuleContext<Start__y_Context>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isimple_jsonListener typedListener = listener as Isimple_jsonListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isimple_jsonListener typedListener = listener as Isimple_jsonListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			_localctx.v = start__y_();
			State = 13;
			Match(Eof);
			 _localctx.result =  _localctx.v.result; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start__y_Context : ParserRuleContext {
		public JsonValue result;
		public JsonContext start__y__0__1;
		[System.Diagnostics.DebuggerNonUserCode] public JsonContext json() {
			return GetRuleContext<JsonContext>(0);
		}
		public Start__y_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start__y_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isimple_jsonListener typedListener = listener as Isimple_jsonListener;
			if (typedListener != null) typedListener.EnterStart__y_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isimple_jsonListener typedListener = listener as Isimple_jsonListener;
			if (typedListener != null) typedListener.ExitStart__y_(this);
		}
	}

	[RuleVersion(0)]
	public Start__y_Context start__y_() {
		Start__y_Context _localctx = new Start__y_Context(Context, State);
		EnterRule(_localctx, 2, RULE_start__y_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			_localctx.start__y__0__1 = json();
			 
			                _localctx.result =  _localctx.start__y__0__1.result;
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonpairContext : ParserRuleContext {
		public (string, JsonValue) result;
		public IToken jsonpair_0__1;
		public JsonContext jsonpair_0__3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(simple_jsonParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonContext json() {
			return GetRuleContext<JsonContext>(0);
		}
		public JsonpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isimple_jsonListener typedListener = listener as Isimple_jsonListener;
			if (typedListener != null) typedListener.EnterJsonpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isimple_jsonListener typedListener = listener as Isimple_jsonListener;
			if (typedListener != null) typedListener.ExitJsonpair(this);
		}
	}

	[RuleVersion(0)]
	public JsonpairContext jsonpair() {
		JsonpairContext _localctx = new JsonpairContext(Context, State);
		EnterRule(_localctx, 4, RULE_jsonpair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			_localctx.jsonpair_0__1 = Match(STR);
			State = 20;
			Match(T__0);
			State = 21;
			_localctx.jsonpair_0__3 = json();
			 
			                _localctx.result =  (unesc(getStr(_localctx.jsonpair_0__1)), _localctx.jsonpair_0__3.result);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Seplist_o__i__s__i__s_json_p_Context : ParserRuleContext {
		public System.Collections.Generic.List<JsonValue> result;
		public Seplist_o__i__s__i__s_json_p_Context seplist_o__i__s__i__s_json_p__1__1;
		public JsonContext seplist_o__i__s__i__s_json_p__0__1;
		public JsonContext seplist_o__i__s__i__s_json_p__1__3;
		[System.Diagnostics.DebuggerNonUserCode] public JsonContext json() {
			return GetRuleContext<JsonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_o__i__s__i__s_json_p_Context seplist_o__i__s__i__s_json_p_() {
			return GetRuleContext<Seplist_o__i__s__i__s_json_p_Context>(0);
		}
		public Seplist_o__i__s__i__s_json_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seplist_o__i__s__i__s_json_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isimple_jsonListener typedListener = listener as Isimple_jsonListener;
			if (typedListener != null) typedListener.EnterSeplist_o__i__s__i__s_json_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isimple_jsonListener typedListener = listener as Isimple_jsonListener;
			if (typedListener != null) typedListener.ExitSeplist_o__i__s__i__s_json_p_(this);
		}
	}

	[RuleVersion(0)]
	public Seplist_o__i__s__i__s_json_p_Context seplist_o__i__s__i__s_json_p_() {
		return seplist_o__i__s__i__s_json_p_(0);
	}

	private Seplist_o__i__s__i__s_json_p_Context seplist_o__i__s__i__s_json_p_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Seplist_o__i__s__i__s_json_p_Context _localctx = new Seplist_o__i__s__i__s_json_p_Context(Context, _parentState);
		Seplist_o__i__s__i__s_json_p_Context _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_seplist_o__i__s__i__s_json_p_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 25;
			_localctx.seplist_o__i__s__i__s_json_p__0__1 = json();
			 
			                _localctx.result =  new System.Collections.Generic.List<JsonValue> { _localctx.seplist_o__i__s__i__s_json_p__0__1.result };
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 35;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Seplist_o__i__s__i__s_json_p_Context(_parentctx, _parentState);
					_localctx.seplist_o__i__s__i__s_json_p__1__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_seplist_o__i__s__i__s_json_p_);
					State = 28;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 29;
					Match(T__1);
					State = 30;
					_localctx.seplist_o__i__s__i__s_json_p__1__3 = json();
					 
					                          _localctx.result =  appendList<JsonValue>(_localctx.seplist_o__i__s__i__s_json_p__1__1.result, _localctx.seplist_o__i__s__i__s_json_p__1__3.result);
					                      
					}
					} 
				}
				State = 37;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Seplist_o__i__s__i__s_jsonpair_p_Context : ParserRuleContext {
		public System.Collections.Generic.List<(string, JsonValue)> result;
		public Seplist_o__i__s__i__s_jsonpair_p_Context seplist_o__i__s__i__s_jsonpair_p__1__1;
		public JsonpairContext seplist_o__i__s__i__s_jsonpair_p__0__1;
		public JsonpairContext seplist_o__i__s__i__s_jsonpair_p__1__3;
		[System.Diagnostics.DebuggerNonUserCode] public JsonpairContext jsonpair() {
			return GetRuleContext<JsonpairContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_o__i__s__i__s_jsonpair_p_Context seplist_o__i__s__i__s_jsonpair_p_() {
			return GetRuleContext<Seplist_o__i__s__i__s_jsonpair_p_Context>(0);
		}
		public Seplist_o__i__s__i__s_jsonpair_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seplist_o__i__s__i__s_jsonpair_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isimple_jsonListener typedListener = listener as Isimple_jsonListener;
			if (typedListener != null) typedListener.EnterSeplist_o__i__s__i__s_jsonpair_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isimple_jsonListener typedListener = listener as Isimple_jsonListener;
			if (typedListener != null) typedListener.ExitSeplist_o__i__s__i__s_jsonpair_p_(this);
		}
	}

	[RuleVersion(0)]
	public Seplist_o__i__s__i__s_jsonpair_p_Context seplist_o__i__s__i__s_jsonpair_p_() {
		return seplist_o__i__s__i__s_jsonpair_p_(0);
	}

	private Seplist_o__i__s__i__s_jsonpair_p_Context seplist_o__i__s__i__s_jsonpair_p_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Seplist_o__i__s__i__s_jsonpair_p_Context _localctx = new Seplist_o__i__s__i__s_jsonpair_p_Context(Context, _parentState);
		Seplist_o__i__s__i__s_jsonpair_p_Context _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_seplist_o__i__s__i__s_jsonpair_p_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 39;
			_localctx.seplist_o__i__s__i__s_jsonpair_p__0__1 = jsonpair();
			 
			                _localctx.result =  new System.Collections.Generic.List<(string, JsonValue)> { _localctx.seplist_o__i__s__i__s_jsonpair_p__0__1.result };
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 49;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Seplist_o__i__s__i__s_jsonpair_p_Context(_parentctx, _parentState);
					_localctx.seplist_o__i__s__i__s_jsonpair_p__1__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_seplist_o__i__s__i__s_jsonpair_p_);
					State = 42;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 43;
					Match(T__1);
					State = 44;
					_localctx.seplist_o__i__s__i__s_jsonpair_p__1__3 = jsonpair();
					 
					                          _localctx.result =  appendList<(string, JsonValue)>(_localctx.seplist_o__i__s__i__s_jsonpair_p__1__1.result, _localctx.seplist_o__i__s__i__s_jsonpair_p__1__3.result);
					                      
					}
					} 
				}
				State = 51;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class JsonContext : ParserRuleContext {
		public JsonValue result;
		public IToken json_0__1;
		public IToken json_1__1;
		public IToken json_3__1;
		public Seplist_o__i__s__i__s_json_p_Context json_6__2;
		public Seplist_o__i__s__i__s_jsonpair_p_Context json_7__2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(simple_jsonParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(simple_jsonParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(simple_jsonParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_o__i__s__i__s_json_p_Context seplist_o__i__s__i__s_json_p_() {
			return GetRuleContext<Seplist_o__i__s__i__s_json_p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_o__i__s__i__s_jsonpair_p_Context seplist_o__i__s__i__s_jsonpair_p_() {
			return GetRuleContext<Seplist_o__i__s__i__s_jsonpair_p_Context>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isimple_jsonListener typedListener = listener as Isimple_jsonListener;
			if (typedListener != null) typedListener.EnterJson(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isimple_jsonListener typedListener = listener as Isimple_jsonListener;
			if (typedListener != null) typedListener.ExitJson(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 10, RULE_json);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				_localctx.json_0__1 = Match(INT);
				 
				                _localctx.result =  jsonInt(parseInt(getStr(_localctx.json_0__1)));
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54;
				_localctx.json_1__1 = Match(FLOAT);
				 
				                _localctx.result =  jsonFlt(parseFlt(getStr(_localctx.json_1__1)));
				            
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 56;
				Match(T__2);
				 
				                _localctx.result =  jsonNull;
				            
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 58;
				_localctx.json_3__1 = Match(STR);
				 
				                _localctx.result =  jsonStr(unesc(getStr(_localctx.json_3__1)));
				            
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 60;
				Match(T__3);
				State = 61;
				Match(T__4);
				 
				                _localctx.result =  jsonList(new System.Collections.Generic.List<JsonValue> {  });
				            
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 63;
				Match(T__5);
				State = 64;
				Match(T__6);
				 
				                _localctx.result =  jsonDict(new System.Collections.Generic.List<(string, JsonValue)> {  });
				            
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 66;
				Match(T__3);
				State = 67;
				_localctx.json_6__2 = seplist_o__i__s__i__s_json_p_(0);
				State = 68;
				Match(T__4);
				 
				                _localctx.result =  jsonList(_localctx.json_6__2.result);
				            
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 71;
				Match(T__5);
				State = 72;
				_localctx.json_7__2 = seplist_o__i__s__i__s_jsonpair_p_(0);
				State = 73;
				Match(T__6);
				 
				                _localctx.result =  jsonDict(_localctx.json_7__2.result);
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return seplist_o__i__s__i__s_json_p__sempred((Seplist_o__i__s__i__s_json_p_Context)_localctx, predIndex);
		case 4: return seplist_o__i__s__i__s_jsonpair_p__sempred((Seplist_o__i__s__i__s_jsonpair_p_Context)_localctx, predIndex);
		}
		return true;
	}
	private bool seplist_o__i__s__i__s_json_p__sempred(Seplist_o__i__s__i__s_json_p_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool seplist_o__i__s__i__s_jsonpair_p__sempred(Seplist_o__i__s__i__s_jsonpair_p_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\r', 'Q', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '$', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', '\'', '\v', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x32', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', '\x35', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', 'O', '\n', '\a', '\x3', '\a', '\x2', '\x4', '\b', '\n', '\b', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\x2', '\x2', '\x2', 'S', '\x2', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x15', '\x3', '\x2', '\x2', '\x2', '\b', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\n', '(', '\x3', '\x2', '\x2', '\x2', '\f', 'N', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\xF', '\x5', '\x4', '\x3', '\x2', '\xF', 
		'\x10', '\a', '\x2', '\x2', '\x3', '\x10', '\x11', '\b', '\x2', '\x1', 
		'\x2', '\x11', '\x3', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\x5', 
		'\f', '\a', '\x2', '\x13', '\x14', '\b', '\x3', '\x1', '\x2', '\x14', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\a', '\f', '\x2', 
		'\x2', '\x16', '\x17', '\a', '\x3', '\x2', '\x2', '\x17', '\x18', '\x5', 
		'\f', '\a', '\x2', '\x18', '\x19', '\b', '\x4', '\x1', '\x2', '\x19', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\b', '\x5', '\x1', 
		'\x2', '\x1B', '\x1C', '\x5', '\f', '\a', '\x2', '\x1C', '\x1D', '\b', 
		'\x5', '\x1', '\x2', '\x1D', '%', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x1F', '\f', '\x3', '\x2', '\x2', '\x1F', ' ', '\a', '\x4', '\x2', '\x2', 
		' ', '!', '\x5', '\f', '\a', '\x2', '!', '\"', '\b', '\x5', '\x1', '\x2', 
		'\"', '$', '\x3', '\x2', '\x2', '\x2', '#', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '$', '\'', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', 
		'\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '(', ')', 
		'\b', '\x6', '\x1', '\x2', ')', '*', '\x5', '\x6', '\x4', '\x2', '*', 
		'+', '\b', '\x6', '\x1', '\x2', '+', '\x33', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\f', '\x3', '\x2', '\x2', '-', '.', '\a', '\x4', '\x2', '\x2', 
		'.', '/', '\x5', '\x6', '\x4', '\x2', '/', '\x30', '\b', '\x6', '\x1', 
		'\x2', '\x30', '\x32', '\x3', '\x2', '\x2', '\x2', '\x31', ',', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x35', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\v', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\a', '\n', '\x2', '\x2', '\x37', 
		'O', '\b', '\a', '\x1', '\x2', '\x38', '\x39', '\a', '\v', '\x2', '\x2', 
		'\x39', 'O', '\b', '\a', '\x1', '\x2', ':', ';', '\a', '\x5', '\x2', '\x2', 
		';', 'O', '\b', '\a', '\x1', '\x2', '<', '=', '\a', '\f', '\x2', '\x2', 
		'=', 'O', '\b', '\a', '\x1', '\x2', '>', '?', '\a', '\x6', '\x2', '\x2', 
		'?', '@', '\a', '\a', '\x2', '\x2', '@', 'O', '\b', '\a', '\x1', '\x2', 
		'\x41', '\x42', '\a', '\b', '\x2', '\x2', '\x42', '\x43', '\a', '\t', 
		'\x2', '\x2', '\x43', 'O', '\b', '\a', '\x1', '\x2', '\x44', '\x45', '\a', 
		'\x6', '\x2', '\x2', '\x45', '\x46', '\x5', '\b', '\x5', '\x2', '\x46', 
		'G', '\a', '\a', '\x2', '\x2', 'G', 'H', '\b', '\a', '\x1', '\x2', 'H', 
		'O', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\b', '\x2', '\x2', 'J', 
		'K', '\x5', '\n', '\x6', '\x2', 'K', 'L', '\a', '\t', '\x2', '\x2', 'L', 
		'M', '\b', '\a', '\x1', '\x2', 'M', 'O', '\x3', '\x2', '\x2', '\x2', 'N', 
		'\x36', '\x3', '\x2', '\x2', '\x2', 'N', '\x38', '\x3', '\x2', '\x2', 
		'\x2', 'N', ':', '\x3', '\x2', '\x2', '\x2', 'N', '<', '\x3', '\x2', '\x2', 
		'\x2', 'N', '>', '\x3', '\x2', '\x2', '\x2', 'N', '\x41', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x44', '\x3', '\x2', '\x2', '\x2', 'N', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'O', '\r', '\x3', '\x2', '\x2', '\x2', '\x5', '%', 
		'\x33', 'N',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace simple_json
