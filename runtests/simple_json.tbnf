extern var parseInt : str -> int
extern var parseFlt : str -> float
extern var getStr : token -> str
extern var unesc : str -> str
extern var appendList : <'a> (list<'a>, 'a) -> list<'a>

type Json
type JsonPair(name: str, value: Json)

case JsonInt : int -> Json
case JsonFlt : float -> Json
case JsonStr : str -> Json
case JsonNull : () -> Json
case JsonList : (elements: list<Json>) -> Json
case JsonDict : list<JsonPair> -> Json
case JsonBool : bool -> Json

ignore space

digit = [0-9] ;

start : json { $1 }

int = digit+ ;
float = digit* "." int ;
str = "\"" ( "\\" _ | ! "\"" )* "\"" ;
space = ("\t" | "\n" | "\r" | " ")+;

seplist(sep, elt) : elt { [$1] }
                  | seplist(sep, elt) sep elt
                    { appendList($1, $3) }

jsonpair : <str> ":" json { JsonPair(unesc(getStr($1)), $3) }

/* CPP comments */

json : <int> { JsonInt(parseInt(getStr($1))) }
      | <float> { JsonFlt(parseFlt(getStr($1))) }
      | "null"  { JsonNull() }
      | <str>   { JsonStr(unesc(getStr($1))) }
      | "[" "]" { JsonList([]) }
      | "{" "}" { JsonDict([]) }
      | "true"  { JsonBool(true) }
      | "false"  { JsonBool(false) }
      | "[" seplist(",", json) "]" { JsonList($2) }
      | "{" seplist(",", jsonpair) "}" { JsonDict($2) }
