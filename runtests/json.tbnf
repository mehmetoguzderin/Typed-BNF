shape token {
    lexeme : str
}

val nil : forall 'a. () -> list['a]
val cons : forall 'a. ('a, list['a]) -> list['a]
val mk_dict: forall 'k 'v. (list[('k, 'v)]) -> dict['k, 'v]
val parse_int: (str) -> int
val parse_float: (str) -> float
val unesc_string: (str) -> str
val json_list: (list[json]) -> json
val json_dict: (dict[str, json]) -> json
val json_int : (int) -> json
val json_float : (float) -> json
val json_string : (str) -> json

start : list[json]      { $1 }
list[a] :               { nil() }
        | a "," list[a] { cons($1, $3) }

str : <str> { $1.lexeme }
pair : str ":" json   { ($1, $3) }

seplist[sep, elt] :                            { nil() }
                  | elt sep seplist[sep, elt]  { cons($1, $3) }

json : "[" list[json] "]" { json_list($2) }
| "{" seplist[",", pair] "}" { json_dict(mk_dict($2)) }
| <int>             { json_int(parse_int($1.lexeme)) }
| <FLOAT>           { json_float(parse_float($1.lexeme)) }
| str               { json_string(unesc_string($1)) }



<str> : "\"" ("\\" _ | !"\"" ) "\""
<int> : DIGIT+
<DIGIT> : [0 .. 9]
<FLOAT> : int "." int
